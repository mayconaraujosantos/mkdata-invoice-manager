buildscript {
   ext {
		springBootVersion = '3.1.4'
        springDependencyManager = '1.1.3'
        spotlesPluginVersion = '6.17.0'
        sonarqubePlugin = '4.4.1.3373'
        spotbugsPluginVersion = '5.0.13'
        spotbugsVersion = '4.7.3'

		mapStructVersion = '1.5.3.Final'
		springdocVersion = '2.0.4'
		mongodbVersion = '3.1.4'
		lombokVersion = '1.18.20'
		htmlUnitVersion = '2.70.0'
   }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManager}"
	id 'com.diffplug.spotless' version "${spotlesPluginVersion}"
	id 'jacoco'
	id 'org.sonarqube' version "${sonarqubePlugin}"
	id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
}

group = 'com.mkdata'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${mongodbVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
	implementation  "net.sourceforge.htmlunit:htmlunit:${htmlUnitVersion}"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
	developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation  "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "com.mkdata.invoicesmanager.application.mapper/**",
                "com.mkdata.invoicesmanager.application.dto/**",
                "com.mkdata.invoicesmanager.infrastructure.exception/**",
            ])
        }))
    }

    reports {
        xml {
            enabled true
            xml.outputLocation.set(layout.buildDirectory.file("$buildDir/jacoco/jacoco.xml"))
        }

        html {
            enabled true
            html.outputLocation.set(layout.buildDirectory.dir("$buildDir/reports/jacoco"))
        }

    }
}

jacocoTestCoverageVerification {
   violationRules {
       rule {
           limit {
               minimum = 0.1
           }
       }
   }
}

sonar {
  properties {
    property "sonar.projectKey", "mayconaraujosantos_mkdata-invoice-manager"
    property "sonar.organization", "mayconaraujosantos"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

tasks.named('test') {
	useJUnitPlatform()
}
