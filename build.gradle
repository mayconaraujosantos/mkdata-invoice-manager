buildscript {
   ext {
		springBootVersion = '3.1.4'
        springDependencyManager = '1.1.3'
        spotlesPluginVersion = '6.17.0'
        sonarqubePlugin = '4.4.1.3373'
        spotbugsPluginVersion = '5.0.13'
        spotbugsVersion = '4.7.3'

		mapStructVersion = '1.5.3.Final'
		springdocVersion = '2.0.4'
		mongodbVersion = '3.1.4'
		lombokVersion = '1.18.20'
		htmlUnitVersion = '2.70.0'
		flapdoodleVersion = '4.9.3'
   }
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManager}"
	id 'com.diffplug.spotless' version "${spotlesPluginVersion}"
	id 'jacoco'
	id 'org.sonarqube' version "${sonarqubePlugin}"
	id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
}

apply from : 'dependencies.gradle'

group = 'com.mkdata'
version = '1.0.0'

allprojects {
	repositories {
		mavenCentral()
	}
	apply plugin: 'java'
	sourceCompatibility = '17'

	test {
		useJUnitPlatform()
	}
}



subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}
	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:${flapdoodleVersion}"
		implementation 'org.jetbrains:annotations:23.0.0'

		implementation sharedDependencies
		developmentOnly sharedDevDependencies
		testImplementation sharedTestDependencies
	}

	tasks.named('test') {
		useJUnitPlatform()
	}
}

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [

            ])
        }))
    }

    reports {
        xml {
            enabled true
            xml.outputLocation.set(layout.buildDirectory.file("jacoco/jacoco.xml"))
        }

        html {
            enabled true
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco"))
        }

    }
}

jacocoTestCoverageVerification {
   violationRules {
       rule {
           limit {
               minimum = 0.1
           }
       }
   }
}

sonar {
  properties {
    property "sonar.projectKey", "mayconaraujosantos_mkdata-invoice-manager"
    property "sonar.organization", "mayconaraujosantos"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}


bootRun {
	enabled = false
}

bootJar {
	enabled = false
}

bootBuildImage{
	enabled = false
}